{"kind":"FETCH","data":{"headers":{"connection":"keep-alive","content-length":"13589","content-type":"application/json","date":"Wed, 08 Jan 2025 09:45:45 GMT","server":"istio-envoy","strict-transport-security":"max-age=63072000; include-subdomains","x-envoy-upstream-service-time":"11929"},"body":"","status":200,"url":"https://api.langflow.astra.datastax.com/lf/d4db2943-5547-4f36-8d55-4cb64223be8c/api/v1/run/7bedef0d-c20f-4849-99c8-08093bb345d2?stream=false"},"revalidate":31536000,"tags":[]}